{"version":3,"sources":["components/Task.js","components/Tasks.js","App.js","serviceWorker.js","index.js","components/Task.module.css"],"names":["Task","props","border","isComplete","completeBtn","completeTxt","cls","complete","className","task","onDragOver","dragOver","draggable","onDragStart","dragStart","onDragEnd","dragEnd","onClick","name","date","delete","Tasks","state","newTask","tasks","show","onChangeHandler","e","console","log","target","value","setState","addTask","event","preventDefault","Date","toLocaleDateString","year","month","day","hour","minute","id","length","deleteTask","prevState","filter","completeTask","index","findIndex","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","draggedOverItem","splice","draggedIdx","showCompleted","showActive","showAll","filterTasks","this","map","i","key","btnCls","onSubmit","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.471721e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport cls from './Task.module.css';\r\n\r\nconst Task = (props) => {\r\n    const border = props.isComplete ? 'border-success' : 'border-danger';\r\n    const completeBtn = props.isComplete ? 'far fa-2x fa-check-circle text-success mx-2' : 'far fa-2x fa-circle mx-2';\r\n    const completeTxt = props.isComplete ? cls.complete : 'd-inline'\r\n    return (\r\n        <li className={cls.task + ' col-sm-6 my-2'} onDragOver={props.dragOver}>\r\n            <div className={'bg-light shadow p-2 border rounded ' + border} draggable onDragStart={props.dragStart} onDragEnd={props.dragEnd}>\r\n                <i onClick={props.complete} className={completeBtn}></i>\r\n                <h4 className={completeTxt}>{props.name}</h4>\r\n                <p className='text-secondary'>{props.date}</p>\r\n                <button className='btn btn-danger mx-1' onClick={props.delete}>Delete</button>\r\n                <button className='btn btn-primary mx-1'>Edit</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nexport default Task;","import React, { Component } from 'react';\r\nimport Task from './Task';\r\n\r\nclass Tasks extends Component {\r\n    state = {\r\n        newTask: '',\r\n        tasks: [],\r\n        show: 'all'\r\n    }\r\n    onChangeHandler = e => {\r\n        console.log(e.target.value);\r\n        this.setState({ newTask: e.target.value });\r\n    }\r\n    addTask = (event) => {\r\n        event.preventDefault();\r\n        const newTask = this.state.newTask;\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' };\r\n        const date = new Date().toLocaleDateString('en-US', options);\r\n        const id = this.state.tasks.length + 1 + newTask;\r\n        const task = { task: newTask, date: date, id: id, isComplete: false };\r\n        this.setState({\r\n            tasks: [...this.state.tasks, task],\r\n            newTask: '',\r\n        });\r\n    }\r\n    deleteTask = (id) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                tasks: prevState.tasks.filter(task => task.id !== id)\r\n            };\r\n        })\r\n    }\r\n    completeTask = (id) => {\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex(task => task.id === id);\r\n        tasks[index].isComplete = !tasks[index].isComplete;\r\n        this.setState({ tasks: tasks });\r\n    }\r\n    dragStart = (e, index) => {\r\n        this.draggedItem = this.state.tasks[index];\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode);\r\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\r\n    };\r\n    dragOver = index => {\r\n        const draggedOverItem = this.state.tasks[index];\r\n        if (this.draggedItem === draggedOverItem) {\r\n            return;\r\n        }\r\n        let tasks = this.state.tasks.filter(task => task !== this.draggedItem);\r\n        tasks.splice(index, 0, this.draggedItem);\r\n        this.setState({ tasks: tasks });\r\n    };\r\n\r\n    dragEnd = () => {\r\n        this.draggedIdx = null;\r\n    };\r\n    showCompleted = () => {\r\n        this.setState({ show: 'completed' });\r\n    }\r\n    showActive = () => {\r\n        this.setState({ show: 'active' });\r\n    }\r\n    showAll = () => {\r\n        this.setState({ show: 'all' });\r\n    }\r\n    render() {\r\n        let filterTasks = null;\r\n        switch (this.state.show) {\r\n            case 'completed': filterTasks = this.state.tasks.filter(task => task.isComplete === true);\r\n                break;\r\n            case 'active': filterTasks = this.state.tasks.filter(task => task.isComplete === false);\r\n                break;\r\n            case 'all': filterTasks = [...this.state.tasks];\r\n                break;\r\n            default: return;\r\n        }\r\n        const tasks = filterTasks.map((task, i) => (\r\n            <Task\r\n                key={task.id}\r\n                name={task.task}\r\n                date={task.date}\r\n                delete={() => this.deleteTask(task.id)}\r\n                isComplete={task.isComplete}\r\n                complete={() => this.completeTask(task.id)}\r\n                dragStart={e => this.dragStart(e, i)}\r\n                dragOver={() => this.dragOver(i)}\r\n                dragEnd={this.dragEnd}\r\n            >\r\n            </Task>\r\n\r\n        ));\r\n        const btnCls = 'btn shadow btn-sm m-2 '\r\n        return (\r\n            <div className='container'>\r\n                <form className='col-sm-8' onSubmit={this.addTask}>\r\n                    <input placeholder='What needs to be done?' value={this.state.newTask} className='form-control shadow m-2 p-2' onChange={this.onChangeHandler} />\r\n                </form>\r\n                {this.state.tasks.length > 0 ?\r\n                    <div className='container-fluid'>\r\n                        <button className={btnCls + 'btn-secondary'} onClick={() => this.showAll()}>All</button>\r\n                        <button className={btnCls + 'btn-danger'} onClick={() => this.showActive()}>Active</button>\r\n                        <button className={btnCls + 'btn-success'} onClick={() => this.showCompleted()}>Completed</button>\r\n                    </div> : null}\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n            </div>\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default Tasks;","import React, { Component } from 'react';\nimport Tasks from './components/Tasks'\n\nclass App extends Component {\n  render() {\n    return (\n\n      <Tasks />\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__A1WjP\",\"complete\":\"Task_complete__1BZYy\"};"],"sourceRoot":""}