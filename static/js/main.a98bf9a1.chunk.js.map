{"version":3,"sources":["stateManager/actions/filters.js","stateManager/actions/todos.js","components/Todo/Todo.js","components/Todos/Todos.js","components/Toolbar/Toolbar.js","App.js","stateManager/reducers/todos.js","stateManager/reducers/filters.js","stateManager/reducers/index.js","stateManager/store.js","serviceWorker.js","index.js"],"names":["getFilteredTodos","todos","filters","filteredTodos","label","filter","todo","status","Filters","SHOW_ALL","SHOW_COMPLETED","isComplete","SHOW_ACTIVE","Labels","value","color","addTodo","content","date","type","Todo","state","editContent","props","editLabel","onContentEditHandler","e","setState","target","onLabelEditHandler","OnSubmitHandler","preventDefault","id","newContent","newLabel","newDate","Date","toLocaleDateString","year","month","day","hour","minute","editTodoSubmit","onDuplicateHandler","duplicateTodo","getLabelColor","myLabel","index","findIndex","console","log","completeBtn","this","completeContent","lastModifiedDate","draggableId","provided","className","draggableProps","dragHandleProps","ref","innerRef","Label","ribbon","_","capitalize","isEditing","onSubmit","autoFocus","onChange","map","key","Icon","disabled","trim","onClick","editTodo","data-tip","place","effect","afterShow","setTimeout","ReactTooltip","hide","deleteTodo","completeTodo","Component","connect","dispatch","Todos","onDragEnd","result","destination","source","droppableId","reorderTodos","droppableProps","task","i","placeholder","sourceIndex","destIndex","Toolbar","onChangeHandler","onLabelChange","onTodoSubmit","top","Button","basic","setStatusFilter","length","deleteAllTodos","setLabelFilter","toggle","App","todosReducer","action","newTodo","draggedTodo","find","splice","initialState","visibilityFiltersReducer","allReducers","combineReducers","presistedStore","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a98bf9a1.chunk.js","sourcesContent":["export const SET_STATUS_FILTERS = 'SET_STATUS_FILTERS';\r\nexport const SET_LABEL_FILTERS = 'SET_LABEL_FILTERS';\r\nexport const setStatusFilter = status => {\r\n  return {\r\n    type: SET_STATUS_FILTERS,\r\n    status\r\n  };\r\n};\r\nexport const setLabelFilter = label => {\r\n  return {\r\n    type: SET_LABEL_FILTERS,\r\n    label\r\n  };\r\n};\r\nexport const getFilteredTodos = (todos, filters) => {\r\n  const filteredTodos =\r\n    filters.label === 'all'\r\n      ? todos\r\n      : todos.filter(todo => todo.label === filters.label);\r\n  switch (filters.status) {\r\n    case Filters.SHOW_ALL:\r\n      return filteredTodos;\r\n    case Filters.SHOW_COMPLETED:\r\n      return filteredTodos.filter(todo => todo.isComplete === true);\r\n    case Filters.SHOW_ACTIVE:\r\n      return filteredTodos.filter(todo => todo.isComplete === false);\r\n    default:\r\n      return filteredTodos;\r\n  }\r\n};\r\nexport const Filters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\nexport const Labels = [\r\n  { value: 'general', color: 'orange' },\r\n  { value: 'home', color: 'blue' },\r\n  { value: 'bussines', color: 'red' },\r\n  { value: 'personal', color: 'purple' }\r\n];\r\n","export const ADD_TODO = 'ADD_TODO';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const EDIT_TODO_SUBMIT = 'EDIT_TODO_SUBMIT';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\r\nexport const DELETE_ALL_TODOS = 'DELETE_ALL_TODOS';\r\nexport const REORDER_TODOS = 'REORDER_TODOS';\r\nexport const addTodo = (content, label, date) => {\r\n  return {\r\n    type: ADD_TODO,\r\n    content,\r\n    label,\r\n    date\r\n  };\r\n};\r\nexport const editTodo = id => {\r\n  return {\r\n    type: EDIT_TODO,\r\n    id\r\n  };\r\n};\r\nexport const editTodoSubmit = (id, content, label, date) => {\r\n  return {\r\n    type: EDIT_TODO_SUBMIT,\r\n    id,\r\n    content,\r\n    label,\r\n    date\r\n  };\r\n};\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id\r\n  };\r\n};\r\nexport const completeTodo = id => {\r\n  return {\r\n    type: COMPLETE_TODO,\r\n    id\r\n  };\r\n};\r\nexport const deleteAllTodos = () => {\r\n  return {\r\n    type: DELETE_ALL_TODOS\r\n  };\r\n};\r\nexport const reorderTodos = (sourceIndex, destIndex, draggableId) => {\r\n  return {\r\n    type: REORDER_TODOS,\r\n    sourceIndex,\r\n    destIndex,\r\n    draggableId\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Reveal from 'react-reveal/Reveal';\r\nimport { Icon, Label } from 'semantic-ui-react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport _ from 'lodash';\r\n\r\nimport {\r\n  editTodo,\r\n  editTodoSubmit,\r\n  completeTodo,\r\n  deleteTodo,\r\n  addTodo\r\n} from '../../stateManager/actions/todos';\r\nimport { Labels } from '../../stateManager/actions/filters';\r\nimport './Todo.css';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nclass Todo extends Component {\r\n  state = {\r\n    editContent: this.props.content,\r\n    editLabel: this.props.label\r\n  };\r\n  onContentEditHandler = e => this.setState({ editContent: e.target.value });\r\n  onLabelEditHandler = e => this.setState({ editLabel: e.target.value });\r\n  OnSubmitHandler = e => {\r\n    e.preventDefault();\r\n    const id = this.props.id;\r\n    const newContent = this.state.editContent;\r\n    const newLabel = this.state.editLabel;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const newDate = new Date().toLocaleDateString('en-US', options);\r\n    this.props.editTodoSubmit(id, newContent, newLabel, newDate);\r\n  };\r\n  onDuplicateHandler = e => {\r\n    e.preventDefault();\r\n    const content = this.props.content;\r\n    const label = this.props.label;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const date = new Date().toLocaleDateString('en-US', options);\r\n    this.props.duplicateTodo(content, label, date);\r\n  };\r\n  getLabelColor = myLabel => {\r\n    const index = Labels.findIndex(label => label.value === myLabel);\r\n    const color = Labels[index].color;\r\n    console.log(color);\r\n    return color;\r\n  };\r\n\r\n  render() {\r\n    const completeBtn = this.props.isComplete\r\n      ? 'check circle green big'\r\n      : 'check circle outline big ';\r\n    const completeContent = this.props.isComplete ? 'completed ' : '';\r\n    const lastModifiedDate =\r\n      this.props.lastModifiedDate !== ''\r\n        ? 'Last modified date: ' + this.props.lastModifiedDate\r\n        : '';\r\n\r\n    return (\r\n      <Draggable draggableId={this.props.id} index={this.props.index}>\r\n        {provided => (\r\n          <div\r\n            className='todo'\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <Label ribbon color={this.getLabelColor(this.props.label)}>\r\n              {_.capitalize(this.props.label)}\r\n            </Label>\r\n            {this.props.isEditing ? (\r\n              <Reveal>\r\n                <form\r\n                  className='form-container'\r\n                  onSubmit={this.OnSubmitHandler}\r\n                >\r\n                  <input\r\n                    className='form-item'\r\n                    autoFocus\r\n                    type='text'\r\n                    value={this.state.editContent}\r\n                    onChange={this.onContentEditHandler}\r\n                  ></input>\r\n                  <select\r\n                    className='form-item'\r\n                    value={this.state.editLabel}\r\n                    onChange={this.onLabelEditHandler}\r\n                  >\r\n                    {Labels.map(label => (\r\n                      <option key={label.value} value={label.value}>\r\n                        {_.capitalize(label.value)}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  <Icon\r\n                    className='check big green form-icon'\r\n                    disabled={!this.state.editContent.trim() ? true : false}\r\n                    onClick={this.OnSubmitHandler}\r\n                  />\r\n                </form>\r\n              </Reveal>\r\n            ) : (\r\n              <div className='details'>\r\n                <span\r\n                  className={completeContent + 'content'}\r\n                  onClick={() => this.props.editTodo(this.props.id)}\r\n                  data-tip='Click to edit'\r\n                >\r\n                  {this.props.content}\r\n                </span>\r\n                <ReactTooltip\r\n                  place='bottom'\r\n                  type='light'\r\n                  effect='solid'\r\n                  afterShow={() => {\r\n                    setTimeout(ReactTooltip.hide, 8000);\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            <div className='dates'>\r\n              <p>Create date: {this.props.date}</p>\r\n              <p>{lastModifiedDate}</p>\r\n            </div>\r\n            <div className='btns'>\r\n              <Icon\r\n                className='x big red'\r\n                data-tip='Delete todo'\r\n                onClick={() => this.props.deleteTodo(this.props.id)}\r\n              />\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 8000);\r\n                }}\r\n              />\r\n              <Icon\r\n                className='copy big teal'\r\n                data-tip='Duplicate todo'\r\n                onClick={this.onDuplicateHandler}\r\n              />\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 8000);\r\n                }}\r\n              />\r\n              <Icon\r\n                className={completeBtn}\r\n                data-tip={\r\n                  !this.props.isComplete ? 'Complete todo' : 'Uncomplete todo'\r\n                }\r\n                onClick={() => this.props.completeTodo(this.props.id)}\r\n              ></Icon>\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 8000);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deleteTodo: id => dispatch(deleteTodo(id)),\r\n    editTodo: id => dispatch(editTodo(id)),\r\n    completeTodo: id => dispatch(completeTodo(id)),\r\n    editTodoSubmit: (id, content, label, date) =>\r\n      dispatch(editTodoSubmit(id, content, label, date)),\r\n    duplicateTodo: (content, label, date) =>\r\n      dispatch(addTodo(content, label, date))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\r\n","import React, { Component } from 'react';\r\nimport { Droppable, DragDropContext } from 'react-beautiful-dnd';\r\nimport { connect } from 'react-redux';\r\nimport { getFilteredTodos } from '../../stateManager/actions/filters';\r\nimport { reorderTodos } from '../../stateManager/actions/todos';\r\nimport Todo from '../Todo/Todo';\r\nimport './Todos.css';\r\n\r\nclass Todos extends Component {\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      (destination.droppableId === source.droppableId) &\r\n      (destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n    this.props.reorderTodos(source.index, destination.index, draggableId);\r\n  };\r\n  render() {\r\n    return (\r\n      <DragDropContext className='cont' onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId='droppable'>\r\n          {provided => (\r\n            <div\r\n              className='todos-container'\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {this.props.todos.map((task, i) => (\r\n                <Todo\r\n                  key={task.id}\r\n                  id={task.id}\r\n                  label={task.label}\r\n                  index={i}\r\n                  content={task.content}\r\n                  date={task.date}\r\n                  isEditing={task.isEditing}\r\n                  isComplete={task.isComplete}\r\n                  lastModifiedDate={task.lastModifiedDate}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: getFilteredTodos(state.todos, state.filters)\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    reorderTodos: (sourceIndex, destIndex, draggableId) =>\r\n      dispatch(reorderTodos(sourceIndex, destIndex, draggableId))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Icon, Button } from 'semantic-ui-react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Fade from 'react-reveal/Fade';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo, deleteAllTodos } from '../../stateManager/actions/todos';\r\nimport {\r\n  setLabelFilter,\r\n  setStatusFilter,\r\n  Filters,\r\n  Labels\r\n} from '../../stateManager/actions/filters';\r\nimport './Toolbar.css';\r\n\r\nclass Toolbar extends Component {\r\n  state = {\r\n    content: '',\r\n    label: 'general'\r\n  };\r\n  onChangeHandler = e => this.setState({ content: e.target.value });\r\n\r\n  onLabelChange = e => this.setState({ label: e.target.value });\r\n\r\n  onTodoSubmit = e => {\r\n    e.preventDefault();\r\n    const content = this.state.content;\r\n    const label = this.state.label;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const date = new Date().toLocaleDateString('en-US', options);\r\n    this.props.addTodo(content, label, date);\r\n    this.setState({\r\n      content: '',\r\n      status: 'all',\r\n      label: 'general'\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Fade top>\r\n          <form className='form-container' onSubmit={this.onTodoSubmit}>\r\n            <input\r\n              className='form-item input'\r\n              autoFocus\r\n              type='text'\r\n              value={this.state.content}\r\n              onChange={this.onChangeHandler}\r\n              placeholder='What needs to be done?'\r\n            />\r\n            <select\r\n              className='form-item select'\r\n              value={this.state.label}\r\n              onChange={this.onLabelChange}\r\n            >\r\n              {Labels.map(label => (\r\n                <option key={label.value} value={label.value}>\r\n                  {_.capitalize(label.value)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <Icon\r\n              className='plus blue big form-icon'\r\n              disabled={!this.state.content.trim() ? true : false}\r\n              onClick={this.onTodoSubmit}\r\n              data-tip='Add new todo'\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 9000);\r\n              }}\r\n            />\r\n          </form>\r\n\r\n          <button onClick={() => console.log(this.state)}>state</button>\r\n          <button onClick={() => console.log(this.props.todos)}>todos</button>\r\n          <button onClick={() => console.log(this.props.filters)}>\r\n            filters\r\n          </button>\r\n          <div className='btns-group'>\r\n            <Button\r\n              basic={\r\n                this.props.filters.status === Filters.SHOW_ALL ? false : true\r\n              }\r\n              className='tiny black'\r\n              onClick={() => this.props.setStatusFilter(Filters.SHOW_ALL)}\r\n            >\r\n              All\r\n            </Button>\r\n            <Button\r\n              basic={\r\n                this.props.filters.status === Filters.SHOW_ACTIVE ? false : true\r\n              }\r\n              className='tiny red'\r\n              onClick={() => this.props.setStatusFilter(Filters.SHOW_ACTIVE)}\r\n            >\r\n              Active\r\n            </Button>\r\n            <Button\r\n              basic={\r\n                this.props.filters.status === Filters.SHOW_COMPLETED\r\n                  ? false\r\n                  : true\r\n              }\r\n              className='tiny green'\r\n              onClick={() => this.props.setStatusFilter(Filters.SHOW_COMPLETED)}\r\n            >\r\n              Completed\r\n            </Button>\r\n            <Icon\r\n              className='trash big grey'\r\n              disabled={this.props.todos.length !== 0 ? false : true}\r\n              onClick={() => this.props.deleteAllTodos()}\r\n              data-tip='Delete all todos'\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              type='light'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 9000);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className='btns-group'>\r\n            <Button\r\n              basic={this.props.filters.label === 'all' ? false : true}\r\n              onClick={() => this.props.setLabelFilter('all')}\r\n              className='mini black'\r\n            >\r\n              All\r\n            </Button>\r\n            {Labels.map(label => (\r\n              <Button\r\n                key={label.value}\r\n                toggle\r\n                basic={this.props.filters.label === label.value ? false : true}\r\n                onClick={() => this.props.setLabelFilter(label.value)}\r\n                className={label.color + ' mini'}\r\n              >\r\n                {_.capitalize(label.value)}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </Fade>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    filters: state.filters\r\n  };\r\n};\r\nconst mapDisptchToProps = dispatch => {\r\n  return {\r\n    addTodo: (content, label, date) => dispatch(addTodo(content, label, date)),\r\n    deleteAllTodos: () => dispatch(deleteAllTodos()),\r\n    setStatusFilter: status => dispatch(setStatusFilter(status)),\r\n    setLabelFilter: label => dispatch(setLabelFilter(label))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDisptchToProps)(Toolbar);\r\n","import React from 'react';\nimport Todos from './components/Todos/Todos';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport '../node_modules/semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Toolbar />\n      <Todos />\n    </div>\n  );\n};\nexport default App;\n","import * as actionTypes from '../actions/todos';\r\nconst todosReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TODO:\r\n      const newTodo = {\r\n        id: action.date + action.content + action.label + state.length,\r\n        content: action.content,\r\n        label: action.label,\r\n        date: action.date,\r\n        lastModifiedDate: '',\r\n        isComplete: false,\r\n        isEditing: false\r\n      };\r\n      return [...state, newTodo];\r\n    case actionTypes.DELETE_TODO:\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case actionTypes.DELETE_ALL_TODOS:\r\n      return [];\r\n    case actionTypes.EDIT_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      );\r\n    case actionTypes.COMPLETE_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, isComplete: !todo.isComplete } : todo\r\n      );\r\n    case actionTypes.EDIT_TODO_SUBMIT:\r\n      return state.map(todo =>\r\n        todo.id === action.id\r\n          ? {\r\n              ...todo,\r\n              content: action.content,\r\n              label: action.label,\r\n              lastModifiedDate: action.date,\r\n              isEditing: false\r\n            }\r\n          : todo\r\n      );\r\n    case actionTypes.REORDER_TODOS:\r\n      const draggedTodo = state.find(todo => todo.id === action.draggableId);\r\n      state.splice(action.sourceIndex, 1);\r\n      state.splice(action.destIndex, 0, draggedTodo);\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default todosReducer;\r\n","import * as actionTypes from '../actions/filters';\r\nimport { Filters } from '../actions/filters';\r\n\r\nconst initialState = {\r\n  status: Filters.SHOW_ALL,\r\n  label: 'all'\r\n};\r\nconst visibilityFiltersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_STATUS_FILTERS:\r\n      return { ...state, status: action.status };\r\n    case actionTypes.SET_LABEL_FILTERS:\r\n      return { ...state, label: action.label };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default visibilityFiltersReducer;\r\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport filters from './filters';\r\nconst allReducers = combineReducers({\r\n  todos,\r\n  filters\r\n});\r\n\r\nexport default allReducers;\r\n","import { createStore } from 'redux';\r\nimport allReducers from './reducers';\r\n\r\nexport const loadState = () => {\r\n  const serializedState = localStorage.getItem('state');\r\n  return JSON.parse(serializedState);\r\n};\r\n\r\nexport const saveState = state => {\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem('state', serializedState);\r\n};\r\nconst presistedStore = loadState();\r\nconst store = createStore(\r\n  allReducers,\r\n  presistedStore,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nstore.subscribe(() => {\r\n  saveState({\r\n    todos: store.getState().todos\r\n  });\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './stateManager/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}