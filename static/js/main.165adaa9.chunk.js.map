{"version":3,"sources":["components/Task.js","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","completeBtn","isComplete","completeTxt","taskContent","isEditing","onSubmit","editSubmit","Input","required","autoFocus","type","value","contentEdit","onChange","onEdit","onBlur","className","content","editBtn","Icon","name","color","onClick","edit","bottom","onDragOver","dragOver","draggable","onDragStart","dragStart","onDragEnd","dragEnd","complete","date","delete","Tasks","state","newTask","tasks","editTask","show","onChangeHandler","e","setState","target","onEditHandler","console","log","addTask","event","preventDefault","Date","toLocaleDateString","year","month","day","hour","minute","task","id","length","editTaskSubmit","index","findIndex","newDate","newId","deleteTask","prevState","filter","deleteAllTasks","completeTask","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","draggedOverItem","splice","draggedIdx","showCompleted","showActive","showAll","filterTasks","this","map","i","key","top","placeholder","size","disabled","data-tip","place","effect","afterShow","setTimeout","ReactTooltip","hide","Container","Grid","Row","Button","basic","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.165adaa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Reveal from 'react-reveal/Reveal';\r\nimport { Input, Icon } from 'semantic-ui-react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport './Task.css';\r\n\r\nconst Task = props => {\r\n  const completeBtn = props.isComplete\r\n    ? 'check circle green big'\r\n    : 'check circle outline big ';\r\n  const completeTxt = props.isComplete ? 'complete' : 'd-inline';\r\n  const taskContent = props.isEditing ? (\r\n    <form onSubmit={props.editSubmit}>\r\n      <Reveal>\r\n        <Input\r\n          required\r\n          autoFocus\r\n          type='text'\r\n          value={props.contentEdit}\r\n          onChange={props.onEdit}\r\n          onBlur={props.editSubmit}\r\n        />\r\n      </Reveal>\r\n    </form>\r\n  ) : (\r\n    <h2 className={completeTxt}>{props.content}</h2>\r\n  );\r\n  const editBtn = !props.isEditing ? (\r\n    <Icon name='edit big' color='blue' onClick={props.edit} />\r\n  ) : (\r\n    <Icon name='check big' color='green' onClick={props.editSubmit} />\r\n  );\r\n  return (\r\n    <Fade bottom>\r\n      <li onDragOver={props.dragOver}>\r\n        <div draggable onDragStart={props.dragStart} onDragEnd={props.dragEnd}>\r\n          {!props.isEditing ? (\r\n            <Icon className={completeBtn} onClick={props.complete}></Icon>\r\n          ) : null}\r\n          {taskContent}\r\n          <p className='text-muted h6'>{props.date}</p>\r\n          <div className='text-right'>\r\n            <Icon name='trash big ' color='red' onClick={props.delete} />\r\n            {editBtn}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </Fade>\r\n  );\r\n};\r\nexport default Task;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Icon, Input, Button, Grid, Container } from 'semantic-ui-react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Fade from 'react-reveal/Fade';\r\nimport Task from './Task';\r\nimport './Tasks.css';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    newTask: '',\r\n    tasks: [],\r\n    editTask: '',\r\n    show: 'all'\r\n  };\r\n  onChangeHandler = e => {\r\n    this.setState({ newTask: e.target.value });\r\n  };\r\n  onEditHandler = e => {\r\n    console.log(e.target.value);\r\n    this.setState({ editTask: e.target.value });\r\n  };\r\n  addTask = event => {\r\n    event.preventDefault();\r\n    const newTask = this.state.newTask;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const date = new Date().toLocaleDateString('en-US', options);\r\n    const id = this.state.tasks.length + newTask + date;\r\n    const task = {\r\n      content: newTask,\r\n      date: date,\r\n      id: id,\r\n      isComplete: false,\r\n      isEditing: false\r\n    };\r\n    this.setState({\r\n      tasks: [...this.state.tasks, task],\r\n      newTask: '',\r\n      show: 'all'\r\n    });\r\n  };\r\n  editTaskSubmit = (event, id) => {\r\n    event.preventDefault();\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex(task => task.id === id);\r\n    const newTask = this.state.editTask;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const newDate = new Date().toLocaleDateString('en-US', options);\r\n    const newId = this.state.tasks.length + 1 + newTask + newDate;\r\n    tasks[index].content = newTask;\r\n    tasks[index].id = newId;\r\n    tasks[index].date = newDate;\r\n    tasks[index].isEditing = false;\r\n    this.setState({ tasks: tasks });\r\n  };\r\n  deleteTask = id => {\r\n    this.setState(prevState => {\r\n      return {\r\n        tasks: prevState.tasks.filter(task => task.id !== id)\r\n      };\r\n    });\r\n  };\r\n  deleteAllTasks = () => {\r\n    this.setState({ tasks: [] });\r\n  };\r\n  editTask = id => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex(task => task.id === id);\r\n    tasks[index].isEditing = !tasks[index].isEditing;\r\n    this.setState({ tasks: tasks, editTask: tasks[index].content });\r\n  };\r\n  completeTask = id => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex(task => task.id === id);\r\n    tasks[index].isComplete = !tasks[index].isComplete;\r\n    this.setState({ tasks: tasks });\r\n  };\r\n  dragStart = (e, index) => {\r\n    this.draggedItem = this.state.tasks[index];\r\n    e.dataTransfer.effectAllowed = 'move';\r\n    e.dataTransfer.setData('text/html', e.target.parentNode);\r\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\r\n  };\r\n  dragOver = index => {\r\n    const draggedOverItem = this.state.tasks[index];\r\n    if (this.draggedItem === draggedOverItem) {\r\n      return;\r\n    }\r\n    let tasks = this.state.tasks.filter(task => task !== this.draggedItem);\r\n    tasks.splice(index, 0, this.draggedItem);\r\n    this.setState({ tasks: tasks });\r\n  };\r\n  dragEnd = () => {\r\n    this.draggedIdx = null;\r\n  };\r\n  showCompleted = () => {\r\n    this.setState({ show: 'completed' });\r\n  };\r\n  showActive = () => {\r\n    this.setState({ show: 'active' });\r\n  };\r\n  showAll = () => {\r\n    this.setState({ show: 'all' });\r\n  };\r\n  render() {\r\n    let filterTasks = null;\r\n    switch (this.state.show) {\r\n      case 'completed':\r\n        filterTasks = this.state.tasks.filter(task => task.isComplete === true);\r\n        break;\r\n      case 'active':\r\n        filterTasks = this.state.tasks.filter(\r\n          task => task.isComplete === false\r\n        );\r\n        break;\r\n      case 'all':\r\n        filterTasks = [...this.state.tasks];\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    let tasks = null;\r\n    filterTasks.length === 0\r\n      ? (tasks = <h4 className='mt-1'>There are no todos yet</h4>)\r\n      : (tasks = filterTasks.map((task, i) => (\r\n          <Task\r\n            key={task.id}\r\n            content={task.content}\r\n            contentEdit={this.state.editTask}\r\n            date={task.date}\r\n            delete={() => this.deleteTask(task.id)}\r\n            edit={() => this.editTask(task.id)}\r\n            onEdit={e => this.onEditHandler(e)}\r\n            editSubmit={e => this.editTaskSubmit(e, task.id)}\r\n            isComplete={task.isComplete}\r\n            isEditing={task.isEditing}\r\n            complete={() => this.completeTask(task.id)}\r\n            dragStart={e => this.dragStart(e, i)}\r\n            dragOver={() => this.dragOver(i)}\r\n            dragEnd={this.dragEnd}\r\n          ></Task>\r\n        )));\r\n    return (\r\n      <Fragment>\r\n        <Fade top>\r\n          <form onSubmit={this.addTask}>\r\n            <Input\r\n              required\r\n              autoFocus\r\n              type='text'\r\n              value={this.state.newTask}\r\n              onChange={this.onChangeHandler}\r\n              placeholder='What needs to be done?'\r\n            />\r\n            <Icon\r\n              name='plus'\r\n              size='huge'\r\n              color='blue'\r\n              disabled={this.state.newTask.length === 0 ? true : false}\r\n              onClick={this.addTask}\r\n              data-tip='Add new todo'\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              type='light'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 9000);\r\n              }}\r\n            />\r\n            <Icon\r\n              name='trash'\r\n              size='huge'\r\n              color='green'\r\n              disabled={this.state.tasks.length === 0 ? true : false}\r\n              onClick={this.deleteAllTasks}\r\n              data-tip='Delete All'\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              type='light'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 9000);\r\n              }}\r\n            />\r\n          </form>\r\n        </Fade>\r\n        {/* <button className='btn btn-primary m-4' onClick={() => console.log(this.state)}></button> */}\r\n        {this.state.tasks.length > 0 ? (\r\n          <Fade top>\r\n            <Container>\r\n              <Grid.Row>\r\n                <Button\r\n                  basic={this.state.show === 'all' ? false : true}\r\n                  color='black'\r\n                  onClick={() => this.showAll()}\r\n                >\r\n                  All\r\n                </Button>\r\n                <Button\r\n                  basic={this.state.show === 'active' ? false : true}\r\n                  color='red'\r\n                  onClick={() => this.showActive()}\r\n                >\r\n                  Active\r\n                </Button>\r\n                <Button\r\n                  basic={this.state.show === 'completed' ? false : true}\r\n                  color='green'\r\n                  onClick={() => this.showCompleted()}\r\n                >\r\n                  Completed\r\n                </Button>\r\n              </Grid.Row>\r\n            </Container>\r\n          </Fade>\r\n        ) : null}\r\n        <ul>{tasks}</ul>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Tasks;\r\n","import React from 'react';\nimport Tasks from './components/Tasks';\nimport '../node_modules/semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Tasks />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}