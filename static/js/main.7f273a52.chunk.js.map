{"version":3,"sources":["components/Task.js","components/Tasks.js","App.js","serviceWorker.js","index.js","components/Task.module.css"],"names":["Task","props","border","isComplete","completeBtn","completeTxt","cls","complete","taskContent","isEditing","onSubmit","editSubmit","autoFocus","type","value","contentEdit","className","onChange","onEdit","onBlur","content","editBtn","onClick","edit","task","onDragOver","dragOver","draggable","onDragStart","dragStart","onDragEnd","dragEnd","date","delete","Tasks","state","newTask","tasks","editTask","show","error","onChangeHandler","e","setState","target","length","onEditHandler","console","log","addTask","event","preventDefault","Date","toLocaleDateString","year","month","day","hour","minute","id","editTaskSubmit","index","findIndex","newDate","newId","deleteTask","prevState","filter","deleteAllTasks","completeTask","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","draggedOverItem","splice","draggedIdx","showCompleted","showActive","showAll","filterTasks","this","map","i","key","placeholder","disabled","class","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7f273a52.chunk.js","sourcesContent":["import React from 'react';\r\nimport cls from './Task.module.css';\r\n\r\nconst Task = (props) => {\r\n    const border = props.isComplete ? 'border-success' : 'border-danger';\r\n    const completeBtn = props.isComplete ? 'far fa-2x fa-check-circle text-success mx-2' : 'far fa-2x fa-circle mx-2';\r\n    const completeTxt = props.isComplete ? cls.complete : 'd-inline'\r\n    const taskContent = props.isEditing ?\r\n        <form onSubmit={props.editSubmit}>\r\n            <input autoFocus type='text' value={props.contentEdit} className='d-inline form-control p-2' onChange={props.onEdit} onBlur={props.editSubmit} />\r\n        </form>\r\n        : <h2 className={completeTxt}>{props.content}</h2>;\r\n    const editBtn = !props.isEditing ?\r\n        <button className='btn btn-primary mx-1' onClick={props.edit}><i className=\"fas fa-edit\"></i></button> :\r\n        <button className='btn btn-success mx-1' onClick={props.editSubmit}><i className=\"fas fa-check\"></i></button>\r\n    return (\r\n        <li className={cls.task + ' card p-2 m-2 col-sm-6 border ' + border} onDragOver={props.dragOver}>\r\n            <div draggable onDragStart={props.dragStart} onDragEnd={props.dragEnd}>\r\n                {!props.isEditing ? <i onClick={props.complete} className={completeBtn}></i> : null}\r\n                {taskContent}\r\n                <p className='text-muted h6'>{props.date}</p>\r\n                <div className='text-right'>\r\n                    <button className='btn btn-danger mx-1' onClick={props.delete}><i className=\"fas fa-trash-alt\"></i></button>\r\n                    {editBtn}\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nexport default Task;","import React, { Component } from 'react';\r\nimport Task from './Task';\r\n\r\nclass Tasks extends Component {\r\n    state = {\r\n        newTask: '',\r\n        tasks: [],\r\n        editTask: '',\r\n        show: 'all',\r\n        error: true\r\n    }\r\n\r\n    onChangeHandler = e => {\r\n        this.setState({ newTask: e.target.value, error: e.target.value.length > 0 ? false : true });\r\n    }\r\n    onEditHandler = e => {\r\n        console.log(e.target.value)\r\n        this.setState({ editTask: e.target.value })\r\n    }\r\n    addTask = (event) => {\r\n        event.preventDefault();\r\n        const newTask = this.state.newTask;\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' };\r\n        const date = new Date().toLocaleDateString('en-US', options);\r\n        const id = this.state.tasks.length + newTask + date;\r\n        const task = { content: newTask, date: date, id: id, isComplete: false, isEditing: false };\r\n        this.setState({\r\n            tasks: [...this.state.tasks, task],\r\n            newTask: '',\r\n            show: 'all',\r\n            error: true\r\n        });\r\n    }\r\n    editTaskSubmit = (event, id) => {\r\n        event.preventDefault();\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex(task => task.id === id);\r\n        const newTask = this.state.editTask;\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' };\r\n        const newDate = new Date().toLocaleDateString('en-US', options);\r\n        const newId = this.state.tasks.length + 1 + newTask + newDate;\r\n        tasks[index].content = newTask;\r\n        tasks[index].id = newId;\r\n        tasks[index].date = newDate;\r\n        tasks[index].isEditing = false;\r\n        this.setState({ tasks: tasks })\r\n\r\n    }\r\n    deleteTask = (id) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                tasks: prevState.tasks.filter(task => task.id !== id)\r\n            };\r\n        })\r\n    }\r\n    deleteAllTasks = () => {\r\n        this.setState({ tasks: [] })\r\n    }\r\n    editTask = (id) => {\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex(task => task.id === id);\r\n        tasks[index].isEditing = !tasks[index].isEditing;\r\n        this.setState({ tasks: tasks, editTask: tasks[index].content });\r\n    }\r\n    completeTask = (id) => {\r\n        const tasks = [...this.state.tasks];\r\n        const index = tasks.findIndex(task => task.id === id);\r\n        tasks[index].isComplete = !tasks[index].isComplete;\r\n        this.setState({ tasks: tasks });\r\n    }\r\n    dragStart = (e, index) => {\r\n        this.draggedItem = this.state.tasks[index];\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode);\r\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\r\n    };\r\n    dragOver = index => {\r\n        const draggedOverItem = this.state.tasks[index];\r\n        if (this.draggedItem === draggedOverItem) {\r\n            return;\r\n        }\r\n        let tasks = this.state.tasks.filter(task => task !== this.draggedItem);\r\n        tasks.splice(index, 0, this.draggedItem);\r\n        this.setState({ tasks: tasks });\r\n    };\r\n\r\n    dragEnd = () => {\r\n        this.draggedIdx = null;\r\n    };\r\n    showCompleted = () => {\r\n        this.setState({ show: 'completed' });\r\n    }\r\n    showActive = () => {\r\n        this.setState({ show: 'active' });\r\n    }\r\n    showAll = () => {\r\n        this.setState({ show: 'all' });\r\n    }\r\n    render() {\r\n        let filterTasks = null;\r\n        switch (this.state.show) {\r\n            case 'completed': filterTasks = this.state.tasks.filter(task => task.isComplete === true);\r\n                break;\r\n            case 'active': filterTasks = this.state.tasks.filter(task => task.isComplete === false);\r\n                break;\r\n            case 'all': filterTasks = [...this.state.tasks];\r\n                break;\r\n            default: return;\r\n        }\r\n        let tasks = null;\r\n        if (filterTasks.length === 0) {\r\n            tasks = <p>There are no todos yet</p>;\r\n        } else {\r\n            tasks = filterTasks.map((task, i) => (\r\n                <Task\r\n                    key={task.id}\r\n                    content={task.content}\r\n                    contentEdit={this.state.editTask}\r\n                    date={task.date}\r\n                    delete={() => this.deleteTask(task.id)}\r\n                    edit={() => this.editTask(task.id)}\r\n                    onEdit={(e) => this.onEditHandler(e)}\r\n                    editSubmit={(e) => this.editTaskSubmit(e, task.id)}\r\n                    isComplete={task.isComplete}\r\n                    isEditing={task.isEditing}\r\n                    complete={() => this.completeTask(task.id)}\r\n                    dragStart={e => this.dragStart(e, i)}\r\n                    dragOver={() => this.dragOver(i)}\r\n                    dragEnd={this.dragEnd}\r\n                >\r\n                </Task>\r\n\r\n            ));\r\n        }\r\n        return (\r\n            <div className='container'>\r\n                <form className='row' onSubmit={this.addTask}>\r\n                    <input autoFocus type='text' placeholder='What needs to be done?' value={this.state.newTask} className='form-control d-inline col-sm-7 shadow m-2 p-2' onChange={this.onChangeHandler} />\r\n                    <button disabled={this.state.error ? true : false} type='submit' className='btn text-primary shadow-none'><i className=\"fas fa-2x fa-plus\"></i></button>\r\n                    <button type='button' onClick={this.deleteAllTasks} disabled={this.state.tasks.length === 0 ? true : false} className='btn text-success shadow-none'><i class=\"fas fa-2x fa-trash-alt\"></i></button>\r\n                </form>\r\n                {this.state.error ? <p className=' col-sm-2 text-danger'>Write Something...</p> : null}\r\n                {/* <button className='btn btn-primary m-4' onClick={() => console.log(this.state)}></button> */}\r\n                {this.state.tasks.length > 0 ?\r\n                    <div className='container-fluid'>\r\n                        <button className={this.state.show === 'all' ? ' btn btn-secondary m-2 btn-sm' : ' btn btn-outline-secondary m-2 btn-sm'} onClick={() => this.showAll()}>All</button>\r\n                        <button className={this.state.show === 'active' ? ' btn btn-danger m-2 btn-sm' : ' btn btn-outline-danger m-2 btn-sm'} onClick={() => this.showActive()}>Active</button>\r\n                        <button className={this.state.show === 'completed' ? ' btn btn-success m-2 btn-sm' : ' btn btn-outline-success m-2 btn-sm'} onClick={() => this.showCompleted()}>Completed</button>\r\n                    </div> : null}\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default Tasks;","import React, { Component } from 'react';\nimport Tasks from './components/Tasks'\n\nclass App extends Component {\n  render() {\n    return (\n\n      <Tasks />\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__A1WjP\",\"complete\":\"Task_complete__1BZYy\",\"add\":\"Task_add__2svxb\"};"],"sourceRoot":""}