{"version":3,"sources":["stateManager/actions/filters.js","stateManager/actions/todos.js","components/Todo/Todo.js","components/Todos/Todos.js","components/Toolbar/Toolbar.js","App.js","stateManager/reducers/todos.js","stateManager/reducers/filters.js","stateManager/reducers/index.js","stateManager/store.js","serviceWorker.js","index.js"],"names":["getFilteredTodos","todos","filters","filteredTodos","label","filter","todo","status","Filters","SHOW_ALL","SHOW_COMPLETED","isComplete","SHOW_ACTIVE","Labels","value","color","addTodo","content","date","type","Todo","state","editContent","props","editLabel","onContentEditHandler","e","setState","target","onLabelEditHandler","OnSubmitHandler","preventDefault","id","newContent","newLabel","newDate","Date","toLocaleDateString","year","month","day","hour","minute","editTodoSubmit","onDuplicateHandler","duplicateTodo","getLabelColor","myLabel","index","findIndex","console","log","completeBtn","this","lastModifiedDate","bootom","Segment","tertiary","className","inverted","padded","Label","ribbon","_","capitalize","isEditing","onSubmit","required","autoFocus","onChange","map","key","displayedValue","Icon","onClick","completeTodo","editTodo","data-tip","place","effect","afterShow","setTimeout","ReactTooltip","hide","deleteTodo","Component","connect","dispatch","Container","length","task","i","Alert","variant","Toolbar","onChangeHandler","onLabelChange","onTodoSubmit","top","Form","Control","placeholder","as","disabled","trim","Row","Button","basic","setStatusFilter","deleteAllTodos","setLabelFilter","toggle","App","todosReducer","action","initialState","visibilityFiltersReducer","allReducers","combineReducers","presistedStore","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9962230.chunk.js","sourcesContent":["export const SET_STATUS_FILTERS = 'SET_STATUS_FILTERS';\r\nexport const SET_LABEL_FILTERS = 'SET_LABEL_FILTERS';\r\nexport const setStatusFilter = status => {\r\n  return {\r\n    type: SET_STATUS_FILTERS,\r\n    status\r\n  };\r\n};\r\nexport const setLabelFilter = label => {\r\n  return {\r\n    type: SET_LABEL_FILTERS,\r\n    label\r\n  };\r\n};\r\nexport const getFilteredTodos = (todos, filters) => {\r\n  const filteredTodos =\r\n    filters.label === 'all'\r\n      ? todos\r\n      : todos.filter(todo => todo.label === filters.label);\r\n  switch (filters.status) {\r\n    case Filters.SHOW_ALL:\r\n      return filteredTodos;\r\n    case Filters.SHOW_COMPLETED:\r\n      return filteredTodos.filter(todo => todo.isComplete === true);\r\n    case Filters.SHOW_ACTIVE:\r\n      return filteredTodos.filter(todo => todo.isComplete === false);\r\n    default:\r\n      return filteredTodos;\r\n  }\r\n};\r\nexport const Filters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\nexport const Labels = [\r\n  { value: 'general', color: 'orange' },\r\n  { value: 'home', color: 'blue' },\r\n  { value: 'bussines', color: 'red' },\r\n  { value: 'personal', color: 'purple' }\r\n];\r\n","export const ADD_TODO = 'ADD_TODO';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const EDIT_TODO_SUBMIT = 'EDIT_TODO_SUBMIT';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\r\nexport const DELETE_ALL_TODOS = 'DELETE_ALL_TODOS';\r\nexport const addTodo = (content, label, date) => {\r\n  return {\r\n    type: ADD_TODO,\r\n    content,\r\n    label,\r\n    date\r\n  };\r\n};\r\nexport const editTodo = id => {\r\n  return {\r\n    type: EDIT_TODO,\r\n    id\r\n  };\r\n};\r\nexport const editTodoSubmit = (id, content, label, date) => {\r\n  return {\r\n    type: EDIT_TODO_SUBMIT,\r\n    id,\r\n    content,\r\n    label,\r\n    date\r\n  };\r\n};\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id\r\n  };\r\n};\r\nexport const completeTodo = id => {\r\n  return {\r\n    type: COMPLETE_TODO,\r\n    id\r\n  };\r\n};\r\nexport const deleteAllTodos = () => {\r\n  return {\r\n    type: DELETE_ALL_TODOS\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Reveal from 'react-reveal/Reveal';\r\nimport { Icon, Segment, Label } from 'semantic-ui-react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Fade from 'react-reveal/Fade';\r\nimport _ from 'lodash';\r\nimport {\r\n  editTodo,\r\n  editTodoSubmit,\r\n  completeTodo,\r\n  deleteTodo,\r\n  addTodo\r\n} from '../../stateManager/actions/todos';\r\nimport { Labels } from '../../stateManager/actions/filters';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n  state = {\r\n    editContent: this.props.content,\r\n    editLabel: this.props.label\r\n  };\r\n  onContentEditHandler = e => this.setState({ editContent: e.target.value });\r\n  onLabelEditHandler = e => this.setState({ editLabel: e.target.value });\r\n  OnSubmitHandler = e => {\r\n    e.preventDefault();\r\n    const id = this.props.id;\r\n    const newContent = this.state.editContent;\r\n    const newLabel = this.state.editLabel;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const newDate = new Date().toLocaleDateString('en-US', options);\r\n    this.props.editTodoSubmit(id, newContent, newLabel, newDate);\r\n  };\r\n  onDuplicateHandler = e => {\r\n    e.preventDefault();\r\n    const content = this.props.content;\r\n    const label = this.props.label;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const date = new Date().toLocaleDateString('en-US', options);\r\n    this.props.duplicateTodo(content, label, date);\r\n  };\r\n  getLabelColor = myLabel => {\r\n    const index = Labels.findIndex(label => label.value === myLabel);\r\n    const color = Labels[index].color;\r\n    console.log(color);\r\n    return color;\r\n  };\r\n  render() {\r\n    const completeBtn = this.props.isComplete\r\n      ? 'check circle green big'\r\n      : 'check circle outline big ';\r\n    const lastModifiedDate =\r\n      this.props.lastModifiedDate !== ''\r\n        ? 'Last modified date: ' + this.props.lastModifiedDate\r\n        : '';\r\n\r\n    return (\r\n      <Fade bootom>\r\n        <Segment tertiary className='col-sm-7 yellow ' inverted padded>\r\n          <Label ribbon color={this.getLabelColor(this.props.label)}>\r\n            {_.capitalize(this.props.label)}\r\n          </Label>\r\n\r\n          {this.props.isEditing ? (\r\n            <Reveal>\r\n              <form\r\n                className='form-inline mt-4'\r\n                onSubmit={this.OnSubmitHandler}\r\n              >\r\n                <input\r\n                  className='form-control'\r\n                  required\r\n                  autoFocus\r\n                  type='text'\r\n                  value={this.state.editContent}\r\n                  onChange={this.onContentEditHandler}\r\n                ></input>\r\n                <select\r\n                  className='form-control'\r\n                  value={this.state.editLabel}\r\n                  onChange={this.onLabelEditHandler}\r\n                >\r\n                  {Labels.map(label => (\r\n                    <option key={label.value} value={label.value}>\r\n                      {label.displayedValue}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <Icon\r\n                  className='check big green mx-2'\r\n                  onClick={this.OnSubmitHandler}\r\n                />\r\n              </form>\r\n            </Reveal>\r\n          ) : (\r\n            <div className='mt-4'>\r\n              <Icon\r\n                className={completeBtn}\r\n                onClick={() => this.props.completeTodo(this.props.id)}\r\n              ></Icon>\r\n              <div\r\n                className='d-inline'\r\n                onClick={() => this.props.editTodo(this.props.id)}\r\n                data-tip='Click to edit'\r\n              >\r\n                {this.props.content}\r\n              </div>\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 8000);\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className='text-muted'>\r\n            <p className='mt-3 mb-0'>Create date: {this.props.date}</p>\r\n            <p className='m-0'>{lastModifiedDate}</p>\r\n          </div>\r\n          <div className=' text-right'>\r\n            <Icon\r\n              className='x big red'\r\n              data-tip='Delete todo'\r\n              onClick={() => this.props.deleteTodo(this.props.id)}\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              type='light'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 8000);\r\n              }}\r\n            />\r\n            <Icon\r\n              className='copy big teal'\r\n              data-tip='Duplicate todo'\r\n              onClick={this.onDuplicateHandler}\r\n            />\r\n            <ReactTooltip\r\n              place='bottom'\r\n              type='light'\r\n              effect='solid'\r\n              afterShow={() => {\r\n                setTimeout(ReactTooltip.hide, 8000);\r\n              }}\r\n            />\r\n          </div>\r\n        </Segment>\r\n      </Fade>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deleteTodo: id => dispatch(deleteTodo(id)),\r\n    editTodo: id => dispatch(editTodo(id)),\r\n    completeTodo: id => dispatch(completeTodo(id)),\r\n    editTodoSubmit: (id, content, label, date) =>\r\n      dispatch(editTodoSubmit(id, content, label, date)),\r\n    duplicateTodo: (content, label, date) =>\r\n      dispatch(addTodo(content, label, date))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container } from 'react-bootstrap';\r\nimport { getFilteredTodos } from '../../stateManager/actions/filters';\r\nimport Todo from '../Todo/Todo';\r\nimport './Todos.css';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Todos = props => {\r\n  return (\r\n    <Container>\r\n      {props.todos.length !== 0 ? (\r\n        props.todos.map((task, i) => (\r\n          <Todo\r\n            key={task.id}\r\n            id={task.id}\r\n            label={task.label}\r\n            index={i}\r\n            content={task.content}\r\n            date={task.date}\r\n            isEditing={task.isEditing}\r\n            isComplete={task.isComplete}\r\n            lastModifiedDate={task.lastModifiedDate}\r\n          />\r\n        ))\r\n      ) : (\r\n        <Alert className='text-center col-sm-2' variant='warning'>\r\n          No todos to display\r\n        </Alert>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: getFilteredTodos(state.todos, state.filters)\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Icon, Button } from 'semantic-ui-react';\r\nimport { Row, Container } from 'react-bootstrap';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Fade from 'react-reveal/Fade';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Form } from 'react-bootstrap';\r\nimport { addTodo, deleteAllTodos } from '../../stateManager/actions/todos';\r\nimport {\r\n  setLabelFilter,\r\n  setStatusFilter,\r\n  Filters,\r\n  Labels\r\n} from '../../stateManager/actions/filters';\r\nimport './Toolbar.css';\r\n\r\nclass Toolbar extends Component {\r\n  state = {\r\n    content: '',\r\n    label: 'general'\r\n  };\r\n  onChangeHandler = e => this.setState({ content: e.target.value });\r\n\r\n  onLabelChange = e => this.setState({ label: e.target.value });\r\n\r\n  onTodoSubmit = e => {\r\n    e.preventDefault();\r\n    const content = this.state.content;\r\n    const label = this.state.label;\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    const date = new Date().toLocaleDateString('en-US', options);\r\n    this.props.addTodo(content, label, date);\r\n    this.setState({\r\n      content: '',\r\n      status: 'all',\r\n      label: 'general'\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Container>\r\n          <Fade top>\r\n            <Form onSubmit={this.onTodoSubmit}>\r\n              <Form.Control\r\n                required\r\n                autoFocus\r\n                type='text'\r\n                value={this.state.content}\r\n                onChange={this.onChangeHandler}\r\n                placeholder='What needs to be done?'\r\n              />\r\n              <Form.Control\r\n                as='select'\r\n                className='form-control'\r\n                value={this.state.label}\r\n                onChange={this.onLabelChange}\r\n              >\r\n                {Labels.map(label => (\r\n                  <option key={label.value} value={label.value}>\r\n                    {_.capitalize(label.value)}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n              <Icon\r\n                className='plus big blue mt-2'\r\n                disabled={!this.state.content.trim() ? true : false}\r\n                onClick={this.onTodoSubmit}\r\n                data-tip='Add new todo'\r\n              />\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 9000);\r\n                }}\r\n              />\r\n            </Form>\r\n\r\n            <button onClick={() => console.log(this.state)}>state</button>\r\n            <button onClick={() => console.log(this.props.todos)}>todos</button>\r\n            <button onClick={() => console.log(this.props.filters)}>\r\n              filters\r\n            </button>\r\n          </Fade>\r\n\r\n          <Fade top>\r\n            <Row className='my-3'>\r\n              <Button\r\n                basic={\r\n                  this.props.filters.status === Filters.SHOW_ALL ? false : true\r\n                }\r\n                className='tiny black'\r\n                onClick={() => this.props.setStatusFilter(Filters.SHOW_ALL)}\r\n              >\r\n                All\r\n              </Button>\r\n              <Button\r\n                basic={\r\n                  this.props.filters.status === Filters.SHOW_ACTIVE\r\n                    ? false\r\n                    : true\r\n                }\r\n                className='tiny red'\r\n                onClick={() => this.props.setStatusFilter(Filters.SHOW_ACTIVE)}\r\n              >\r\n                Active\r\n              </Button>\r\n              <Button\r\n                basic={\r\n                  this.props.filters.status === Filters.SHOW_COMPLETED\r\n                    ? false\r\n                    : true\r\n                }\r\n                className='tiny green'\r\n                onClick={() =>\r\n                  this.props.setStatusFilter(Filters.SHOW_COMPLETED)\r\n                }\r\n              >\r\n                Completed\r\n              </Button>\r\n              <Icon\r\n                className='trash big grey'\r\n                disabled={this.props.todos.length !== 0 ? false : true}\r\n                onClick={() => this.props.deleteAllTodos()}\r\n                data-tip='Delete all todos'\r\n              />\r\n              <ReactTooltip\r\n                place='bottom'\r\n                type='light'\r\n                effect='solid'\r\n                afterShow={() => {\r\n                  setTimeout(ReactTooltip.hide, 9000);\r\n                }}\r\n              />\r\n            </Row>\r\n            <Row className='mb-2'>\r\n              <Button\r\n                basic={this.props.filters.label === 'all' ? false : true}\r\n                onClick={() => this.props.setLabelFilter('all')}\r\n                className='mini black'\r\n              >\r\n                All\r\n              </Button>\r\n              {Labels.map(label => (\r\n                <Button\r\n                  key={label.value}\r\n                  toggle\r\n                  basic={\r\n                    this.props.filters.label === label.value ? false : true\r\n                  }\r\n                  onClick={() => this.props.setLabelFilter(label.value)}\r\n                  className={label.color + ' mini'}\r\n                >\r\n                  {_.capitalize(label.value)}\r\n                </Button>\r\n              ))}\r\n            </Row>\r\n          </Fade>\r\n        </Container>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    filters: state.filters\r\n  };\r\n};\r\nconst mapDisptchToProps = dispatch => {\r\n  return {\r\n    addTodo: (content, label, date) => dispatch(addTodo(content, label, date)),\r\n    deleteAllTodos: () => dispatch(deleteAllTodos()),\r\n    setStatusFilter: status => dispatch(setStatusFilter(status)),\r\n    setLabelFilter: label => dispatch(setLabelFilter(label))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDisptchToProps)(Toolbar);\r\n","import React from 'react';\nimport Todos from './components/Todos/Todos';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport '../node_modules/semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Toolbar />\n      <Todos />\n    </div>\n  );\n};\nexport default App;\n","import * as actionTypes from '../actions/todos';\r\n\r\nconst todosReducer = (\r\n  state = [\r\n    { id: 1, content: '22', label: 'general', date: 1, lastModifiedDate: 1 }\r\n  ],\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.date + action.content + action.label + state.length,\r\n          content: action.content,\r\n          label: action.label,\r\n          date: action.date,\r\n          lastModifiedDate: '',\r\n          isComplete: false,\r\n          isEditing: false\r\n        }\r\n      ];\r\n    case actionTypes.DELETE_TODO:\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case actionTypes.DELETE_ALL_TODOS:\r\n      return [];\r\n    case actionTypes.EDIT_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      );\r\n    case actionTypes.COMPLETE_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, isComplete: !todo.isComplete } : todo\r\n      );\r\n    case actionTypes.EDIT_TODO_SUBMIT:\r\n      return state.map(todo =>\r\n        todo.id === action.id\r\n          ? {\r\n              ...todo,\r\n              content: action.content,\r\n              label: action.label,\r\n              lastModifiedDate: action.date,\r\n              isEditing: false\r\n            }\r\n          : todo\r\n      );\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default todosReducer;\r\n","import * as actionTypes from '../actions/filters';\r\nimport { Filters } from '../actions/filters';\r\n\r\nconst initialState = {\r\n  status: Filters.SHOW_ALL,\r\n  label: 'all'\r\n};\r\nconst visibilityFiltersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_STATUS_FILTERS:\r\n      return { ...state, status: action.status };\r\n    case actionTypes.SET_LABEL_FILTERS:\r\n      return { ...state, label: action.label };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default visibilityFiltersReducer;\r\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport filters from './filters';\r\nconst allReducers = combineReducers({\r\n  todos,\r\n  filters\r\n});\r\n\r\nexport default allReducers;\r\n","import { createStore } from 'redux';\r\nimport allReducers from './reducers';\r\n\r\nexport const loadState = () => {\r\n  const serializedState = localStorage.getItem('state');\r\n  return JSON.parse(serializedState);\r\n};\r\n\r\nexport const saveState = state => {\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem('state', serializedState);\r\n};\r\nconst presistedStore = loadState();\r\nconst store = createStore(\r\n  allReducers,\r\n  presistedStore,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nstore.subscribe(() => {\r\n  saveState({\r\n    todos: store.getState().todos\r\n  });\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './stateManager/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}